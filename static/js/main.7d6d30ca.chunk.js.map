{"version":3,"sources":["LoginForm.jsx","Compose.jsx","MessageList.jsx","UserList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["LoginForm","props","onURLUpdate","event","setURL","target","value","onFormUpdate","setState","name","onSubmit","preventDefault","formData","FormData","xhr","XMLHttpRequest","onreadystatechange","readyState","status","console","log","responseText","response","JSON","parse","setJWT","open","url","send","state","username","password","htmlFor","type","id","this","onChange","React","Component","Compose","message","setRequestHeader","jwt","className","MessageList","list","messages","map","index","display","timestamp","date","Date","toLocaleDateString","toLocaleTimeString","dateFormat","created","user","key","UserList","users","App","initStream","stream","EventSource","addEventListener","close","Set","data","add","push","delete","connected","disconnectCover","Array","from","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAkDeA,E,YA/Cd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAIPC,YAAc,SAACC,GACd,EAAKF,MAAMG,OAAOD,EAAME,OAAOC,QANb,EASnBC,aAAe,SAACJ,GACf,EAAKK,SAAL,eAAgBL,EAAME,OAAOI,KAAON,EAAME,OAAOC,SAV/B,EAanBI,SAAW,SAACP,GACXA,EAAMQ,iBACN,IAAMC,EAAW,IAAIC,SAASV,EAAME,QAChCS,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,WACxB,GAAuB,IAAnBF,EAAIG,YACY,MAAfH,EAAII,OAAgB,CACvBC,QAAQC,IAAIN,EAAIO,cAChB,IAAMC,EAAWC,KAAKC,MAAMV,EAAIO,cAChC,EAAKpB,MAAMwB,OAAOH,EAAQ,SAI7BR,EAAIY,KAAK,OAAQ,EAAKzB,MAAM0B,IAAM,UAAU,GAC5Cb,EAAIc,KAAKhB,IAzBT,EAAKiB,MAAQ,CAACC,SAAU,GAAIC,SAAU,IAFpB,E,sEA+BlB,OACC,6BACC,2BAAOC,QAAQ,OAAf,gBACA,2BAAOC,KAAK,OAAOC,GAAG,MAAMzB,KAAK,MAAMH,MAAO6B,KAAKlC,MAAM0B,IAAKS,SAAUD,KAAKjC,cAC7E,0BAAMQ,SAAUyB,KAAKzB,UACpB,2BAAOsB,QAAQ,YAAf,aACA,2BAAOC,KAAK,OAAOC,GAAG,WAAWzB,KAAK,WAAWH,MAAO6B,KAAKN,MAAMC,SAAUM,SAAUD,KAAK5B,eAC5F,2BAAOyB,QAAQ,YAAf,aACA,2BAAOC,KAAK,OAAOC,GAAG,WAAWzB,KAAK,WAAWH,MAAO6B,KAAKN,MAAME,SAAUK,SAAUD,KAAK5B,eAC5F,2BAAO0B,KAAK,SAAS3B,MAAM,gB,GAzCR+B,IAAMC,WC0CfC,G,kBAxCd,WAAYtC,GAAQ,IAAD,8BAClB,4CAAMA,KAIPmC,SAAW,SAACjC,GACX,EAAKK,SAAS,CAACgC,QAASrC,EAAME,OAAOC,SANnB,EASnBI,SAAW,SAACP,GACXA,EAAMQ,iBACN,IAAMC,EAAW,IAAIC,SAASV,EAAME,QAChCS,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,WACD,IAAnBF,EAAIG,aACY,MAAfH,EAAII,OACPC,QAAQC,IAAI,WAEZD,QAAQC,IAAI,YAIfN,EAAIY,KAAK,OAAQ,EAAKzB,MAAM0B,IAAM,YAAY,GAC9Cb,EAAI2B,iBAAiB,gBAAiB,UAAY,EAAKxC,MAAMyC,KAC7D5B,EAAIc,KAAKhB,GACT,EAAKJ,SAAS,CAACgC,QAAS,MAvBxB,EAAKX,MAAQ,CAACW,QAAS,IAFL,E,sEA6BlB,OACC,yBAAKG,UAAU,WACd,0BAAMjC,SAAUyB,KAAKzB,UACpB,2BAAOiC,UAAU,gBAAgBV,KAAK,OAAOxB,KAAK,UAAUH,MAAO6B,KAAKN,MAAMW,QAASJ,SAAUD,KAAKC,WACtG,2BAAOO,UAAU,iBAAiBV,KAAK,SAAS3B,MAAM,e,GAlCrC+B,IAAMC,Y,UC0CbM,E,YA/Bd,WAAY3C,GAAQ,qEACbA,I,sEAIN,IAAI4C,EAAOV,KAAKlC,MAAM6C,SAASC,KAAI,SAACP,EAASQ,GAC5C,IAAIC,EAhBP,SAAoBC,GAChB,IAAIC,EAAO,IAAIC,KAAiB,IAAZF,GACpB,OACIC,EAAKE,mBAAmB,SACxB,IACAF,EAAKG,mBAAmB,SAWfC,CAAWf,EAAQgB,SACjC,OAAQhB,EAAQP,MACf,IAAK,UACJgB,GAAW,IAAMT,EAAQiB,KAAO,KAAOjB,EAAQA,QAC/C,MACD,IAAK,OACL,IAAK,OACJS,GAAW,IAAMT,EAAQP,KAAO,IAAMO,EAAQiB,KAC9C,MACD,IAAK,eACJR,GAAW,IAAMT,EAAQP,KAAO,KAAOO,EAAQtB,OAKjD,OAAO,wBAAIwC,IAAKV,GAAQC,MAEzB,OACC,yBAAKN,UAAU,gBACbE,O,GA1BqBR,IAAMC,WCQjBqB,G,kBAjBd,WAAY1D,GAAQ,qEACbA,I,sEAIN,IAAI4C,EAAOV,KAAKlC,MAAM2D,MAAMb,KAAI,SAACU,GAChC,OAAO,wBAAIC,IAAKD,GAAOA,MAExB,OACC,yBAAKd,UAAU,aACd,gDACCE,O,GAZkBR,IAAMC,YC0HduB,G,kBArHd,WAAY5D,GAAQ,IAAD,8BAClB,4CAAMA,KAKPwB,OAAS,SAACiB,GACT,EAAKlC,SAAS,CAACkC,IAAKA,IACT,MAAPA,GACH,EAAKoB,cATY,EAanBA,WAAa,WACZ,EAAKC,OAAS,IAAIC,YAAY,EAAKnC,MAAMF,IAAM,WAAa,EAAKE,MAAMa,KACvE,EAAKqB,OAAOE,iBAAiB,cAAc,SAAC9D,GAC3CgB,QAAQC,IAAIjB,GACZ,EAAK4D,OAAOG,QACZ,EAAKH,OAAS,KACd,EAAKvD,SAAS,CAACkC,IAAK,KAAMI,SAAU,GAAIc,MAAO,IAAIO,SACjD,GACH,EAAKJ,OAAOE,iBAAiB,QAAQ,SAAC9D,GACrCgB,QAAQC,IAAIjB,GACZ,IAAIiE,EAAO7C,KAAKC,MAAMrB,EAAMiE,MACxBX,EAAOW,EAAKX,KAChB,EAAKjD,UAAS,SAACqB,EAAO5B,GACrB,IAAI2D,EAAQ/B,EAAM+B,MAElB,OADAA,EAAMS,IAAIZ,GACH,CAACG,MAAOA,MAGhB,EAAKpD,UAAS,SAACqB,EAAO5B,GACrB,IAAI6C,EAAWjB,EAAMiB,SAGrB,OAFAsB,EAAKnC,KAAO9B,EAAM8B,KAClBa,EAASwB,KAAKF,GACP,CAACtB,SAAUA,SAEjB,GACH,EAAKiB,OAAOE,iBAAiB,WAAW,SAAC9D,GACxCgB,QAAQC,IAAIjB,GACZ,IAAIiE,EAAO7C,KAAKC,MAAMrB,EAAMiE,MAC5B,EAAK5D,UAAS,SAACqB,EAAO5B,GACrB,IAAI6C,EAAWjB,EAAMiB,SAGrB,OAFAsB,EAAKnC,KAAO9B,EAAM8B,KAClBa,EAASwB,KAAKF,GACP,CAACtB,SAAUA,SAEjB,GACH,EAAKiB,OAAOE,iBAAiB,QAAQ,SAAC9D,GACrCgB,QAAQC,IAAIjB,GACZ,IAAIiE,EAAO7C,KAAKC,MAAMrB,EAAMiE,MACxBX,EAAOW,EAAKX,KAChB,EAAKjD,UAAS,SAACqB,EAAO5B,GACrB,IAAI2D,EAAQ/B,EAAM+B,MAElB,OADAA,EAAMW,OAAOd,GACN,CAACG,MAAOA,MAGhB,EAAKpD,UAAS,SAACqB,EAAO5B,GACrB,IAAI6C,EAAWjB,EAAMiB,SAGrB,OAFAsB,EAAKnC,KAAO9B,EAAM8B,KAClBa,EAASwB,KAAKF,GACP,CAACtB,SAAUA,SAEjB,GACH,EAAKiB,OAAOE,iBAAiB,gBAAgB,SAAC9D,GAC7CgB,QAAQC,IAAIjB,GACZ,IAAIiE,EAAO7C,KAAKC,MAAMrB,EAAMiE,MAE5B,EAAK5D,UAAS,SAACqB,EAAO5B,GACrB,IAAI6C,EAAWjB,EAAMiB,SAGrB,OAFAsB,EAAKnC,KAAO9B,EAAM8B,KAClBa,EAASwB,KAAKF,GACP,CAACtB,SAAUA,SAEjB,GACH,EAAKiB,OAAOE,iBAAiB,SAAS,SAAC9D,GACtCgB,QAAQC,IAAIjB,GACZ,IAAIiE,EAAO7C,KAAKC,MAAMrB,EAAMiE,MAC5B,EAAK5D,SAAS,CAACoD,MAAO,IAAIO,IAAIC,EAAKR,OAAQY,WAAW,OACpD,GACH,EAAKT,OAAOE,iBAAiB,SAAS,SAAC9D,GACtCgB,QAAQC,IAAIjB,GACoB,IAA5BA,EAAME,OAAOY,aAChB,EAAK8C,OAAOG,QACZ,EAAKH,OAAS,KACd,EAAKvD,SAAS,CAACkC,IAAK,KAAMI,SAAU,GAAIc,MAAO,IAAIO,OAEpD,EAAK3D,SAAS,CAACgE,WAAW,OACxB,IAzFe,EA4FnBpE,OAAS,SAACuB,GACT,EAAKnB,SAAS,CAACmB,IAAKA,KA3FpB,EAAKE,MAAQ,CAACF,IAAK,GAAIe,IAAK,KAAMI,SAAU,GAAIc,MAAO,IAAIO,IAAOK,WAAW,GAC7E,EAAKT,OAAS,KAHI,E,sEAiGlB,GAAsB,MAAlB5B,KAAKN,MAAMa,IACd,OACC,kBAAC,EAAD,CAAWf,IAAKQ,KAAKN,MAAMF,IAAKvB,OAAQ+B,KAAK/B,OAAQqB,OAAQU,KAAKV,SAGpE,IAAIgD,EAAkB,qCAItB,OAHKtC,KAAKN,MAAM2C,YACfC,EAAkB,yBAAK9B,UAAU,mBAAkB,yBAAKA,UAAU,mBAAf,oDAGnD,oCACC,kBAAC,EAAD,CAAaG,SAAUX,KAAKN,MAAMiB,WAClC,kBAAC,EAAD,CAAUc,MAAOc,MAAMC,KAAKxC,KAAKN,MAAM+B,SACvC,kBAAC,EAAD,CAASjC,IAAKQ,KAAKN,MAAMF,IAAKe,IAAKP,KAAKN,MAAMa,MAC7C+B,O,GAhHapC,IAAMC,YCKJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7d6d30ca.chunk.js","sourcesContent":["import React from 'react';\n\nclass LoginForm extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {username: \"\", password: \"\"};\n\t}\n\n\tonURLUpdate = (event) => {\n\t\tthis.props.setURL(event.target.value);\n\t}\n\n\tonFormUpdate = (event) => {\n\t\tthis.setState({[event.target.name]: event.target.value});\n\t}\n\n\tonSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconst formData = new FormData(event.target);\n\t\tlet xhr = new XMLHttpRequest();\n\t\txhr.onreadystatechange = () => {\n\t\t\tif (xhr.readyState === 4) {\n\t\t\t\tif (xhr.status === 201) {\n\t\t\t\t\tconsole.log(xhr.responseText);\n\t\t\t\t\tconst response = JSON.parse(xhr.responseText);\n\t\t\t\t\tthis.props.setJWT(response[\"token\"]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\txhr.open(\"POST\", this.props.url + \"/login\", true);\n\t\txhr.send(formData);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<label htmlFor=\"url\">Backend URL:</label>\n\t\t\t\t<input type=\"text\" id=\"url\" name=\"url\" value={this.props.url} onChange={this.onURLUpdate}/>\n\t\t\t\t<form onSubmit={this.onSubmit}>\n\t\t\t\t\t<label htmlFor=\"username\">Username:</label>\n\t\t\t\t\t<input type=\"text\" id=\"username\" name=\"username\" value={this.state.username} onChange={this.onFormUpdate}/>\n\t\t\t\t\t<label htmlFor=\"password\">Password:</label>\n\t\t\t\t\t<input type=\"text\" id=\"password\" name=\"password\" value={this.state.password} onChange={this.onFormUpdate}/>\n\t\t\t\t\t<input type=\"submit\" value=\"Login\"/>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport './Compose.css';\n\nclass Compose extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {message: \"\"};\n\t}\n\n\tonChange = (event) => {\n\t\tthis.setState({message: event.target.value});\n\t}\n\n\tonSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconst formData = new FormData(event.target);\n\t\tlet xhr = new XMLHttpRequest();\n\t\txhr.onreadystatechange = () => {\n\t\t\tif (xhr.readyState === 4) {\n\t\t\t\tif (xhr.status === 201) {\n\t\t\t\t\tconsole.log(\"Success\");\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"Failed\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\txhr.open('POST', this.props.url + '/message', true);\n\t\txhr.setRequestHeader('Authorization', 'Bearer ' + this.props.jwt);\n\t\txhr.send(formData);\n\t\tthis.setState({message: \"\"});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"compose\">\n\t\t\t\t<form onSubmit={this.onSubmit}>\n\t\t\t\t\t<input className=\"compose-input\" type=\"text\" name=\"message\" value={this.state.message} onChange={this.onChange}/>\n\t\t\t\t\t<input className=\"compose-submit\" type=\"submit\" value=\"Send\"/>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Compose;\n","import React from 'react';\nimport './MessageList.css';\n\n// Taken from CS291 example web app\nfunction dateFormat(timestamp) {\n    var date = new Date(timestamp * 1000);\n    return (\n        date.toLocaleDateString(\"en-US\") +\n        \" \" +\n        date.toLocaleTimeString(\"en-US\")\n    );\n}\n\nclass MessageList extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\trender() {\n\t\tlet list = this.props.messages.map((message, index) => {\n\t\t\tlet display = dateFormat(message.created)\n\t\t\tswitch (message.type) {\n\t\t\t\tcase 'Message':\n\t\t\t\t\tdisplay += ' ' + message.user + ': ' + message.message;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Join':\n\t\t\t\tcase 'Part':\n\t\t\t\t\tdisplay += ' ' + message.type + ' ' + message.user;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ServerStatus':\n\t\t\t\t\tdisplay += ' ' + message.type + ': ' + message.status;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn <li key={index}>{display}</li>;\n\t\t});\n\t\treturn (\n\t\t\t<div className=\"message-list\">\n\t\t\t\t{list}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default MessageList;\n","import React from 'react';\nimport './UserList.css';\n\nclass UserList extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\trender() {\n\t\tlet list = this.props.users.map((user) => {\n\t\t\treturn <li key={user}>{user}</li>;\n\t\t});\n\t\treturn (\n\t\t\t<div className=\"user-list\">\n\t\t\t\t<center>Active Users</center>\n\t\t\t\t{list}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default UserList;\n","import React from 'react';\nimport LoginForm from './LoginForm';\nimport Compose from './Compose';\nimport MessageList from './MessageList';\nimport UserList from './UserList';\nimport './App.css';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {url: '', jwt: null, messages: [], users: new Set(), connected: false};\n\t\tthis.stream = null;\n\t}\n\n\tsetJWT = (jwt) => {\n\t\tthis.setState({jwt: jwt});\n\t\tif (jwt != null) {\n\t\t\tthis.initStream();\n\t\t}\n\t}\n\n\tinitStream = () => {\n\t\tthis.stream = new EventSource(this.state.url + '/stream/' + this.state.jwt);\n\t\tthis.stream.addEventListener('Disconnect', (event) => {\n\t\t\tconsole.log(event);\n\t\t\tthis.stream.close();\n\t\t\tthis.stream = null;\n\t\t\tthis.setState({jwt: null, messages: [], users: new Set()});\n\t\t}, false);\n\t\tthis.stream.addEventListener('Join', (event) => {\n\t\t\tconsole.log(event);\n\t\t\tlet data = JSON.parse(event.data);\n\t\t\tlet user = data.user;\n\t\t\tthis.setState((state, props) => {\n\t\t\t\tlet users = state.users;\n\t\t\t\tusers.add(user)\n\t\t\t\treturn {users: users};\n\t\t\t});\n\t\t\t// TODO: maybe add a message as well\n\t\t\tthis.setState((state, props) => {\n\t\t\t\tlet messages = state.messages;\n\t\t\t\tdata.type = event.type\n\t\t\t\tmessages.push(data)\n\t\t\t\treturn {messages: messages};\n\t\t\t});\n\t\t}, false);\n\t\tthis.stream.addEventListener('Message', (event) => {\n\t\t\tconsole.log(event);\n\t\t\tlet data = JSON.parse(event.data);\n\t\t\tthis.setState((state, props) => {\n\t\t\t\tlet messages = state.messages;\n\t\t\t\tdata.type = event.type\n\t\t\t\tmessages.push(data)\n\t\t\t\treturn {messages: messages};\n\t\t\t});\n\t\t}, false);\n\t\tthis.stream.addEventListener('Part', (event) => {\n\t\t\tconsole.log(event);\n\t\t\tlet data = JSON.parse(event.data);\n\t\t\tlet user = data.user;\n\t\t\tthis.setState((state, props) => {\n\t\t\t\tlet users = state.users;\n\t\t\t\tusers.delete(user)\n\t\t\t\treturn {users: users};\n\t\t\t});\n\t\t\t// TODO: maybe add a message as well\n\t\t\tthis.setState((state, props) => {\n\t\t\t\tlet messages = state.messages;\n\t\t\t\tdata.type = event.type\n\t\t\t\tmessages.push(data)\n\t\t\t\treturn {messages: messages};\n\t\t\t});\n\t\t}, false);\n\t\tthis.stream.addEventListener('ServerStatus', (event) => {\n\t\t\tconsole.log(event);\n\t\t\tlet data = JSON.parse(event.data);\n\t\t\t// TODO: maybe add a message as well\n\t\t\tthis.setState((state, props) => {\n\t\t\t\tlet messages = state.messages;\n\t\t\t\tdata.type = event.type\n\t\t\t\tmessages.push(data)\n\t\t\t\treturn {messages: messages};\n\t\t\t});\n\t\t}, false);\n\t\tthis.stream.addEventListener('Users', (event) => {\n\t\t\tconsole.log(event);\n\t\t\tlet data = JSON.parse(event.data);\n\t\t\tthis.setState({users: new Set(data.users), connected: true});\n\t\t}, false);\n\t\tthis.stream.addEventListener('error', (event) => {\n\t\t\tconsole.log(event);\n\t\t\tif (event.target.readyState === 2) {\n\t\t\t\tthis.stream.close();\n\t\t\t\tthis.stream = null;\n\t\t\t\tthis.setState({jwt: null, messages: [], users: new Set()});\n\t\t\t}\n\t\t\tthis.setState({connected: false});\n\t\t}, false);\n\t}\n\n\tsetURL = (url) => {\n\t\tthis.setState({url: url});\n\t}\n\n\trender() {\n\t\tif (this.state.jwt == null) {\n\t\t\treturn (\n\t\t\t\t<LoginForm url={this.state.url} setURL={this.setURL} setJWT={this.setJWT}/>\n\t\t\t);\n\t\t}\n\t\tlet disconnectCover = <></>;\n\t\tif (!this.state.connected) {\n\t\t\tdisconnectCover = <div className='disconnectCover'><div className=\"disconnectLabel\">You are disconnected. Please wait to reconnect</div></div>\n\t\t}\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<MessageList messages={this.state.messages}/>\n\t\t\t\t<UserList users={Array.from(this.state.users)}/>\n\t\t\t\t<Compose url={this.state.url} jwt={this.state.jwt}/>\n\t\t\t\t{disconnectCover}\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}